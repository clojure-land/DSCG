diagram hamtCollection

include
	trie,
	hamtNodeOperations,
	collectionOperations

features
	HamtCollection		: all(CollectionType, Ordering, Mutability, Processing, bitPartitionSize, Specialization?, Iteration, ElementHashing, HamtStyle, OtherFeatures?, HamtArraryEncoding, canonicalization?, 
								collectionOperations.CollectionOperations, 
								hamtNodeOperations.HamtNodeOperations)
								
	CollectionType		: one-of(BaseCollection, CompositeCollection)
	BaseCollection		: one-of(bag, set, vector)
	CompositeCollection : one-of(map, multiMap[BaseCollection])
	
	Ordering			: one-of(ordered, unordered)	
	Mutability			: one-of(mutable, transient, immutable)
	Processing			: one-of(sequential, concurrent, parallel)
	
	// BitPartitionSize	: one-of(one, two, three, four, five, six)
	
	Specialization		: one-of(SpecializationType, SpecializationComplexity, SpecializationArityRange)
	SpecializationType	: one-of(HomogeneousSpecialization, heterogeneousSpecialization)
	SpecializationArityRange	: one-of(all, zeroToN)
	HomogeneousSpecialization	: more-of(byGenerics, byClasses, byPrimitives) // more-of depends on the number of unbound payload tuple arguments
	SpecializationComplexity	: one-of(linear, quadratic, exponential)
	
	Iteration					: all(ElementTraversal, ElementTraveralComplexity)
	ElementTraveralComplexity	: one-of(bigO_n, bigO_n_times_log_n) 
	ElementTraversal			: more-of(depthFirst, breadthFirst)

	ElementHashing				: all(ElementHashFunction, CollisionResolutionStrategy, hashLength) // hash length influences CollisionResolutionStrategy
	ElementHashFunction			: one-of(singleHashFunction, multipleHashFunctions)
	CollisionResolutionStrategy	: one-of(chaining, prefixExtension)

	HamtStyle					: one-of(MixedContentNodes, separateLeafFromTrieNodes)
	MixedContentNodes			: one-of(hamt, Champ, hhamt)
	Champ						: one-of(champWithOffsetIndexing, champWithSandwichIndexing)
	
	HamtArraryEncoding			: one-of(nonCompressedArray, bitmapCompressedArray)

	OtherFeatures				: more-of(useFixedStackIterator, useSupplierIterator, useStructuralEquality, methodsWithComparator, usePrefixInsteadOfPostfixEncoding, usePathCompression, useIncrementalHashCodes)


	PropertyUpdateStrategy		: one-of(alwaysCalculated, incrementallyUpdated, lazilyComputedAndThenCached)

	Property_Size				: all(PropertyUpdateStrategy)
	Property_HashCode			: all(PropertyUpdateStrategy) 

constraints
	////
	// HamtCollection
	//////
	// HamtCollection requires PrefixEncodingType.hashOfData
	hashOfData requires unordered 
	// CollectionType.vector excludes PrefixEncodingType.hashOfData
		
		
	////
	// HamtCollection
	//////
	map requires unorderd
	multiMap requires unorderd
	set requires unorderd
	multiSet requires unorderd

	vector requires ordered
		
			 
	////
	// HamtNodeUpdateOperations
	//////
	insertNode requires separateLeafFromTrieNodes
	removeNode requires separateLeafFromTrieNodes
	
	separateLeafFromTrieNodes excludes migrateFromInlineToNode
	separateLeafFromTrieNodes excludes migrateFromNodeToInline

	migrateFromNodeToInline requires canonicalization


	////
	// HamtNodeUpdateOperations
	//////
	// collectionOperations.Equality.structural requires hamtNodeOperations.Equality.structural
	

	////
	// SpecializationArityRange
	//////
	all requires insertPayloadAndConvertToGenericNode
	all requires removePayloadAndConvertToSpecializedNode

	zeroToN excludes insertPayloadAndConvertToGenericNode
	zeroToN excludes removePayloadAndConvertToSpecializedNode


	////
	// HomogeneousSpecialization
	//////
	// HomogeneousSpecialization.byPrimitives excludes SpecializationComplexity.linear


	////
	// Other (unspecified)
	//////
	breadthFirst excludes separateLeafFromTrieNodes // breadthFirst makes only sense with Clojure / CHAMP; TODO: for sake of completeness implement breadth first search in generator